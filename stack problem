# C++ program to check whether a number , string , combination of both (including Special Character) is palindrome or not with the help of Stack .

#include <iostream>
#include<stack>
using namespace std;

int main()
{
    cout<<"ENter the String "<<endl;
    string s;
    cin>>s;
    stack<char>v;
    int n=s.length();
    for(int i=0;i<n;i++){
        v.push(s[i]);
    }
    int f=0;
    for(int i=0;i<n;i++){
        if(v.top()!=s[i]){
            f=1;
            break;
        } 
        v.pop();
    }
    if(f==0){
        cout<<"Palindrome ";
    }
    else{
        cout<<"NOt a Palindrome ";
    }

    return 0;
}

# 2 Stack in one Array implementation ---

#include<iostream>
#include<stack>
using namespace std;
class Stack{
public:
int *arr;
int top;
int size;

Stack(int size){
this-> size=size;
arr=new int[size];
top=-1;
}
void push(int Element ){
    if(size-top>1){
        top++;
        arr[top]=Element;

    }
    else{
        cout<<"stack is Overflow "<<endl;

    }
}
void pop(){
    if(top>=0){
        top--;
    }
    else{
        cout<<"stack is underflow"<<endl;

    }
    }
int peek(){
    if(top>=0)
    return arr[top];
    else{
        cout<<"Stack is Empty"<<endl;
        return -1;

    }
}
bool isEmpty(){
    if(top==-1){
    return true ;
    }
    else{
        return false;

    }
}
};
int main(){
    Stack st(5);
    st.push(1);
    st.push(2);
    st.push(3);
    st.push(4);

    cout<<st.peek()<<endl;
    st.pop();

    cout<<st.peek()<<endl;
    st.pop();

    cout<<st.peek()<<endl;
    st.pop();

    cout<<st.peek()<<endl;
    st.pop();
    
    cout<<st.peek()<<endl;
    

    if(st.isEmpty()){
        cout<<"stack is empty mere dost"<<endl;

    }
    else{
        cout<<"stack is not empty mere dost"<<endl;

    }
return 0;
}
OUTPUT:
4
3
2
1
Stack is Empty
-1
stack is empty mere dost

#Reversing queue using stack 

#include <iostream>
#include <queue>
#include <stack>
using namespace std;

int main()
{
   queue<int>animal;
   stack<int>st;

   animal.push(23);
   animal.push(43);
   animal.push(32);
   animal.push(11);
   animal.push(33);

   //animal.pop(); //Removed element from the front side of queue

   while(!animal.empty()){
    st.push(animal.front());
    animal.pop();
   }

   while(!st.empty())
   {
       animal.push(st.top());
       st.pop();
   }


   while(!animal.empty())
   {
       cout<<animal.front()<<" ";

   animal.pop();
  // animal.pop();
   }

    return 0;
}


# Implementation of stack using Array 
